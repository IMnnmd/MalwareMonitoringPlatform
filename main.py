import threading
import socket
from cuckoo_main import cuckoo_thread
from av_main import av_thread
from json2table import convert

reports = [{}, {}]

av_machine_ip = '192.168.58.128'
av_machine_port = 4433

cuckoo_port = 4433
cuckoo_machine_ip = '192.168.58.129'

try:
    av_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    av_sock.connect((av_machine_ip, av_machine_port))
    print('Binded av sock')
except Exception:
    print(Exception)
    no_av_task = True

try:
    cuckoo_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    cuckoo_sock.connect((cuckoo_machine_ip, cuckoo_port))
    print('Binded cuckoo sock')
except Exception:
    print(Exception)
    no_cuckoo_task = True


while True:
    no_av_task = False
    no_cuckoo_task = False
    print('Файл берется из общей с виртуальными машинами папки. Введите его имя:')
    filename = input()

    if not no_av_task:
        av_task = threading.Thread(target=av_thread, args=(filename, av_sock, reports, ))
        av_task.start()

    if not no_cuckoo_task:
        cuckoo_task = threading.Thread(target=cuckoo_thread, args=(filename, cuckoo_sock, reports, ))
        cuckoo_task.start()
    if not no_av_task:
        av_task.join()
    if not no_cuckoo_task:
        cuckoo_task.join()

    #Making super report
    super_report = reports[1][1]
    super_report = super_report.update({"Score": str(reports[1][0])})
    for elem in reports[0]:
        super_report.update(elem)
    print(super_report)


    if filename == 'QUIT':
        break

print('Connection closed')