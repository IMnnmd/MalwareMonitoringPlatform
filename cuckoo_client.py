import requests
import socket
import shutil
import base64
import time
import calendar
import codecs
import os

# SHARED FOLDER SAMPLES PATH
NET_PATH = '/mnt/hgfs/Shared/Samples/'

# Sample PATH
SAMPLE_PATH = "/home/analysis/Desktop/Samples/"

# SHARED FOLDER REPORTS PATH
REPORT_PATH = '/mnt/hgfs/Shared/Reports'

HEADER = 4
FORMAT = 'utf-8'

ts = ''

REST_URL_CREATE_TASK = "http://localhost:8090/tasks/create/file"

REST_URL_TASK_REPORT = "http://localhost:8090/tasks/report/"

API_KEY = {"Authorization": "Bearer LqUoxemRyW6oIZk5Nuub1Q"}

sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
sock.bind(('0.0.0.0', 4433))

sock.listen(3)


def process_msg(con, addr):
    msg_len = con.recv(HEADER)
    msg_len = msg_len.decode(FORMAT)
    if msg_len:
        msg = base64.b64decode(con.recv(int(msg_len))).decode('utf-8')
        return msg


def check_task_status(id):
    r = requests.post(REST_URL_TASK_REPORT + str(id), headers=API_KEY)
    return r


def do_scan(SAMPLE_FILE):
    print("Start scan")
    with open(SAMPLE_FILE, "rb") as sample:
        files = {"file": ("penis", sample)}
        r = requests.post(REST_URL_CREATE_TASK, headers=API_KEY, files=files)
    task_id = r.json()["task_id"]
    # while True:
    res = check_task_status(task_id)
    print(res)


def cpy_f(filename):
    global SAMPLE_PATH
    global NET_PATH
    global ts
    try:
        open(NET_PATH[1:] + filename)
        try:
            open(SAMPLE_PATH + filename)
            ts = calendar.timegm(time.gmtime())
            print('Such file exists. Creating a copy.')
            shutil.copyfile(NET_PATH[1:] + filename, SAMPLE_PATH + filename + str(ts))
        except FileNotFoundError:
            print('Copying file.')
            shutil.copyfile(NET_PATH[1:] + filename, SAMPLE_PATH + filename)
        return 1
    except FileNotFoundError:
        print('No such file')
        return -1


if __name__ == '__main__':

    while True:
        print("Initializing client")
        con, addr = sock.accept()
        while con:
            res = process_msg(con, addr)
            if res == 'QUIT':
                flag = True
                break
            print("Got message: " + str(res))
            do_scan(NET_PATH + str(res))
            flag = True

        if flag:
            sock.close()
            break
