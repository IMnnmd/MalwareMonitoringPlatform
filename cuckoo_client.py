import requests
import socket
import shutil
import base64
import time
import calendar


# SHARED FOLDER SAMPLES PATH
NET_PATH = '"/mnt/hgfs/Shared/Samples'

# Sample PATH
SAMPLE_PATH = "/home/analysis/Desktop/Samples/"

# SHARED FOLDER REPORTS PATH
REPORT_PATH = '"/mnt/hgfs/Shared/Reports'

HEADER = 4
FORMAT = 'utf-8'

ts = ''

REST_URL = "http://localhost:8090/tasks/create/file"

API_KEY = {"Authorization": "Bearer LqUoxemRyW6oIZk5Nuub1Q"}

sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
sock.bind(('0.0.0.0', 4433))

sock.listen(3)


def process_msg(con, addr):
    msg_len = con.recv(HEADER)
    msg_len = msg_len.decode(FORMAT)
    if msg_len:
        msg = base64.b64decode(con.recv(int(msg_len))).decode('utf-8')
        return msg


def do_scan(SAMPLE_FILE):
    with open(SAMPLE_FILE, "rb") as sample:
        files = {"file": ("temp_file_name", sample)}
        r = requests.post(REST_URL, headers=API_KEY, files=files)


def cpy_f(filename):
    global SAMPLE_PATH
    global NET_PATH
    global ts
    try:
        open(NET_PATH[1:] + filename)
        try:
            open(SAMPLE_PATH + filename)
            ts = calendar.timegm(time.gmtime())
            print('Such file exists. Creating a copy.')
            shutil.copyfile(NET_PATH[1:] + filename, SAMPLE_PATH + filename + str(ts))
        except FileNotFoundError:
            print('Copying file.')
            shutil.copyfile(NET_PATH[1:] + filename, SAMPLE_PATH + filename)
        return 1
    except FileNotFoundError:
        print('No such file')
        return -1


if __name__ == '__main__':


    with open(SAMPLE_FILE, "rb") as sample:
        files = {"file": ("temp_file_name", sample)}
        r = requests.post(REST_URL, headers=API_KEY, files=files)

    # Add your code to error checking for r.status_code.

    task_id = r.json()["task_id"]

    # Add your code for error checking if task_id is None.
    while True:
        con, addr = sock.accept()
        while con:
            res = process_msg(con, addr)
            if res == 'QUIT':
                flag = True
                break
            params = res.split(';')

            curr_filename = params[len(params) - 1]
            state = 1
            if curr_filename != prev_filename:
                state = cpy_f(curr_filename)
                prev_filename = curr_filename

            if state == -1:
                con.send('ER-2'.encode(FORMAT))
                continue

            params[len(params) - 1] = SAMPLE_PATH + curr_filename + str(ts)
            params[len(params) - 2] = REPORT_PATH + params[len(params) - 2] + str(ts) + '"'

            try:
                file = codecs.open(os.path.join(CWD, params[len(params) - 2][1:-1]), 'wb', encoding='utf-8-sig')
            except FileNotFoundError:
                file = codecs.open(params[0] + '.templog', 'wb', encoding='utf-8-sig')
            params.remove(params[len(params) - 2])
            if res[0:3] == 'AVP':
                con.send(do_scan('AVP.com', params, file).encode(FORMAT))

            elif res[0:4] == 'ESET':
                con.send(do_scan('ecls', params, file).encode(FORMAT))

            elif res[0:5] == 'WinAV':
                con.send(do_scan('"%ProgramFiles%\Windows Defender\MpCmdRun.exe"', params, file).encode(FORMAT))
                if os.path.exists(f"{SAMPLE_PATH + prev_filename + str(ts)}"):
                    os.remove(f"{SAMPLE_PATH + prev_filename + str(ts)}")
                else:
                    print('No sample exists')
            file.close()

        if flag:
            sock.close()
            break
